{"version":3,"sources":["../src/mock-schema.js"],"names":["root","factory","define","amd","exports","module","createSchema","mock","MockSchema","global","createDumbArray","len","dumbArray","i","push","createStructure","obj","times","mocked","forEach","name","index","_mock","Object","assign","id","_schema","schema","entitie","quantity","_strucuture","mockedData","key","value"],"mappings":";;;;AAAA;AACC,WAAUA,IAAV,EAAgBC,OAAhB,EAAyB;AACxB,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,OAAOC,GAA3C,EAAgD;AAC9CD,WAAO,EAAP,EAAWD,OAAX;AACD,GAFD,MAEO,IAAI,QAAOG,OAAP,yCAAOA,OAAP,OAAmB,QAAvB,EAAiC;AACtCC,WAAOD,OAAP,GAAiB;AACfE,oBAAcL,QAAQK,YADP;AAEfC,YAAMN,QAAQM;AAFC,KAAjB;AAID,GALM,MAKA;AACLP,SAAKQ,UAAL,GAAkBP,OAAlB;AACD;AACF,CAXA,EAWC,IAXD,EAWO,UAAUQ,MAAV,EAAkB;;AAE1B;;;;AAIA,WAASC,eAAT,CAAyBC,GAAzB,EAA8B;AAC5B,QAAIC,YAAY,EAAhB;AACA,SAAK,IAAIC,IAAE,CAAX,EAAcA,IAAEF,GAAhB,EAAqBE,GAArB,EAA0B;AACxBD,gBAAUE,IAAV,CAAeD,CAAf;AACD;AACD,WAAOD,SAAP;AACD;;AAED;;;;;;AAMA,WAASG,eAAT,CAA0BC,GAA1B,EAA+BC,KAA/B,EAAsC;AACpC,QAAIC,SAAS,EAAb;AACAR,oBAAgBO,KAAhB,EAAuBE,OAAvB,CAA+B,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC9C,UAAIC,QAAQC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,GAAlB,CAAZ;AACAM,YAAMG,EAAN,GAAWJ,KAAX;AACAH,aAAOJ,IAAP,CAAYQ,KAAZ;AACD,KAJD;AAKA,WAAOJ,MAAP;AACD;;AAED;;;;;AAKA,MAAIQ,UAAU,EAAd;;AAEA;;;;;AAKA,WAASpB,YAAT,CAAsBqB,MAAtB,EAA8B;AAC5BJ,WAAOC,MAAP,CAAcE,OAAd,EAAuBC,MAAvB;AACD;;AAED;;;;AAIC,WAASpB,IAAT,CAAcqB,OAAd,EAAuBC,QAAvB,EAAiC;AAChC,QAAIC,oBAAJ;AAAA,QAAkBC,aAAa,EAA/B;;AAEA,WAAOH,OAAP,KAAmB,QAAnB,GACGE,cAAcJ,QAAQE,OAAR,CADjB,GAEGE,cAAcF,OAFjB;;AAKA,SAAK,IAAII,GAAT,IAAgBF,WAAhB,EAA6B;AAC3B,UAAIG,QAAQH,YAAYE,GAAZ,CAAZ;AACAT,aAAOC,MAAP,CAAcO,UAAd,sBAA4BC,GAA5B,EAAiCC,KAAjC;AACD;AACD,WAAOlB,gBAAgBgB,UAAhB,EAA4BF,QAA5B,CAAP;AACD;;AAED,SAAO;AACLtB,UAAKA,IADA;AAELD,kBAAaA;AAFR,GAAP;AAIC,CArEO,CAqEN,IArEM,CAXP,CAAD","file":"mock-schema.js","sourcesContent":[";\n(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    module.exports = {\n      createSchema: factory.createSchema,\n      mock: factory.mock\n    }\n  } else {\n    root.MockSchema = factory;\n  }\n}(this, function (global) {\n\n/**\n * @name createDumbArray\n * @description create an Array with determined Length\n */ \nfunction createDumbArray(len) {\n  let dumbArray = []\n  for (let i=0; i<len; i++) {\n    dumbArray.push(i);\n  }\n  return dumbArray;\n}\n\n/**\n * @name createSchema\n * @description function to create the mock structure\n * @example\n * createSchema({person: {id, name, age});\n */ \nfunction createStructure (obj, times) {\n  let mocked = [];\n  createDumbArray(times).forEach((name, index) => {\n    let _mock = Object.assign({}, obj);\n    _mock.id = index;\n    mocked.push(_mock)\n  });\n  return mocked;\n}\n\n/**\n * @private\n * @name _schema\n * @description The structure of schema\n */ \nlet _schema = {};\n\n/**\n * @name createSchema\n * @param {Object} schema The schema\n * @return void 0\n */ \nfunction createSchema(schema) {\n  Object.assign(_schema, schema);\n}\n\n/**\n * @name mock\n * @description always return an array with the schema structure\n */\n function mock(entitie, quantity) {\n  let _strucuture , mockedData = {};\n  \n  typeof entitie === \"string\" \n   ? _strucuture = _schema[entitie]\n   : _strucuture = entitie\n  ;\n  \n  for (let key in _strucuture) {\n    let value = _strucuture[key];\n    Object.assign(mockedData, {[key]:value});\n  }\n  return createStructure(mockedData, quantity);\n};\n\nreturn {\n  mock:mock,\n  createSchema:createSchema\n}\n}(this)));"]}